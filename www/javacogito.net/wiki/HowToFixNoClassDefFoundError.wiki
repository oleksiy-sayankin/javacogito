Перевод: [[Саянкин Алексей Александрович | Саянкин А.А.]]

__TOC__

<br><br><br><br>
== Введение ==

Известно насколько неприятно видеть исключение <font face=Courier>java.lang.NoClassDefFoundError</font> в потоке "<font face=Courier>main</font>". Многие разработчики проводят много времени прежде всего пытаясь понять, что пошло не так, какого класса не хватает и в чём суть проблемы. Во-первых, они путают между собой <font face=Courier>ClassNotfoundException</font> и <font face=Courier>NoClassDefFoundError</font>, хотя на самом деле это два совершенно разных исключения.  Во-вторых, они используют метод «научного тыка» для решения проблемы <font face=Courier>NoClassDefFoundError</font> вместо ясного понимания почему ошибка случилась и как её исправить. В этой статье по Java мы откроем некоторые секреты исправления ошибки <font face=Courier>NoClassDefFoundError</font> в Java и поделимся своим опытом решения подобной проблемы.
	
Ошибка <font face=Courier>NoClassDefFoundError</font> не является чем-то, что не может быть устранено или чем-то, что очень трудно устраняемо — нет, <font face=Courier>NoClassDefFoundError</font> всего лишь проявление другой, более глубинной ошибки, что сбивает с толку большинство Java разработчиков. <font face=Courier>NoClassDefFoundError</font> наиболее распространённая ошибка в Java разработке наряду с <font face=Courier>java.lang.OutOfMemoroyError: Java heap space</font> и <font face=Courier>java.lang.OutOfMemoryError: PermGen space</font>. Давайте посмотрим почему в Java происходит <font face=Courier>NoClassDefFoundError</font> и что делать, чтобы её исправить.

<br><br><br><br>

== В чём причина <font face=Courier>NoClassDefFoundError</font> в Java? ==

<font face=Courier>NoClassDefFoundError</font> в Java происходит тогда, когда виртуальная машина Java во время исполнения кода не  может найти определённый класс, который был доступен во время компиляции. Например, если мы вызываем метод из класса или обращаемся к статическому члену класса и этот класс не доступен во время выполнения, то  виртуальная машина Java выбрасывает <font face=Courier>NoClassDefFoundError</font>. Важно понимать, что эта ошибка отличается от исключения <font face=Courier>ClassNotFoundException</font>, которое происходит при попытке загрузки класса во время выполнения, причём важно, что имя этого класса было определено только во время выполнения, но не во время компиляции кода. Многие Java разработчики путают эти две ошибки и приходят в тупик при попытке разрешить вопрос.
	
Коротко говоря, <font face=Courier>NoClassDefFoundError</font> происходит, если класс присутствовал во время компиляции, но не доступен в <font face=Courier>classpath</font> во время исполнения. Обычно в этом случае вы увидите следующую строку в журнале ошибок:

<font face=Courier>Exception in thread "main" java.lang.NoClassDefFoundError</font>

Фраза <font face=Courier>Exception in thread "main"</font> означает, что именно поток "<font face=Courier>main</font>" не может найти определённый класс. Вместо "<font face=Courier>main</font>" может быть любой поток. Разница между тем, когда эта ошибка возникает в потоке "<font face=Courier>main</font>" и в другом потоке в состоит том, что при возникновении в потоке "<font face=Courier>main</font>"  программа останавливается, а при возникновении в ином потоке, напротив, продолжает выполнение после ошибки.

<br><br><br><br>

== Разница между <font face=Courier>java.lang.NoClassDefFoundError</font> и <font face=Courier>ClassNotFoundException</font> в Java ==

Прежде чем рассмотреть разницу между <font face=Courier>ClassNotFoundException</font>  и <font face=Courier>NoClassDefFoundError</font>  давайте рассмотрим, что между ними общего и что приводит к путанице между этими двумя ошибками:

* Обе ошибки связаны с недоступностью класса во время выполнения;
* Обе ошибки связаны с Java <font face=Courier>Classpath</font> .

Теперь о различиях. 

* <font face=Courier>ClassNotFoundException</font>  возникает в  Java, если мы пытаемся загрузить класс во время выполнения используя методы <font face=Courier>Class.forName()</font>, <font face=Courier>ClassLoader.loadClass()</font> или <font face=Courier>ClassLoader.findSystemClass()</font> , причём необходимый класс не доступен для Java. Зачастую причина тому — неправильный <font face=Courier>Classpath</font>. В большинстве своём нам кажется, что мы используем корректный  <font face=Courier>Classpath</font>, но оказывается, что приложение использует совсем другой <font face=Courier>Classpath</font>  — не тот, который мы ожидали. Например,  <font face=Courier>Classpath</font> , заданный в манифесте jar файла, перезаписывает <font face=Courier>Classpath</font>  в переменной окружения  <font face=Courier>CLASSPATH</font>  или опции <font face=Courier>-cp</font> , заданной при запуске jar файла. В отличие от <font face=Courier>ClassNotFoundException</font> в случае с <font face=Courier>NoClassDefFoundError</font>  проблемный класс присутствовал во время компиляции, и, поэтому, программа успешно прошла компиляцию, но по некоторой причине класс отсутствует во время исполнения. На мой взгляд решить <font face=Courier>NoClassDefFoundError</font>  легче чем <font face=Courier>ClassNotFoundException</font>, поскольку вы точно знаете, что класс присутствовал во время сборки, но, в общем случае, это сильно зависит от среды разработки. Если вы работаете с J2EE окружением, вы можете получить <font face=Courier>NoClassDefFoundError</font> даже если класс присутствует, поскольку он может быть невидимым для соответствующего загрузчика классов. 
* <font face=Courier>ClassNotFoundException</font> представляет собой проверяемое исключение, унаследованное непосредственно от класса <font face=Courier>java.lang.Exception</font>, требующее явной обработки, в то время как <font face=Courier>NoClassDefFoundError</font> это <font face=Courier>java.lang.Error</font>, унаследованный от <font face=Courier>java.lang.LinkageError</font>.
* <font face=Courier>ClassNotFoundException</font> возникает в результате явной загрузки класса методами <font face=Courier>Class.forName()</font>, <font face=Courier>ClassLoader.loadClass()</font> или <font face=Courier>ClassLoader.findSystemClass()</font>, в то время как <font face=Courier>NoClassDefFoundError</font> — результат неявной загрузки класса, происходящей при попытке вызова метода из другого класса или доступа к его свойству.

<br><br><br><br>

== <font face=Courier>NoClassDefFoundError</font> в Java. Примеры и сценарии == 

Итак, очевидная причина <font face=Courier>NoClassDefFoundError</font> состоит в том, что определённый класс не доступен в <font face=Courier>Classpath</font>, так что нам нужно добавить его в <font face=Courier>Classpath</font> или понять почему его нет в <font face=Courier>Classpath</font>, хотя мы ожидаем его там найти. Для этого могут быть несколько причин:

# Класс не задан непосредственно в самой переменной <font face=Courier>Classpath</font>.
#* Распечатайте значение <font face=Courier>System.getproperty("java.classpath")</font> в Java программе.
#* Проверьте, не перезаписывает ли значение переменной окружения <font face=Courier>Classpath</font> скрипт, запускающий приложение. Запустите программу с явной опцией <font face=Courier>-classpath</font>, где укажите тот <font face=Courier>classpath</font>, который по вашему мнению сработает, и если в этом случае программа заработает, то это хороший знак, что кто-то перезатирает ваш  <font face=Courier>classpath</font>.
# Класс отсутствует по местоположению, указанному в переменной <font face=Courier>Classpath</font>.
#* Проверьте, не удалил ли кто-то ваш jar-файл, или быть может переименовал его.
# Загрузчик классов не имеет прав на чтение файла, указанного в переменной <font face=Courier>Classpath</font>, на уровне операционной системы.
#* Используйте один и тот же id пользователя для всех ресурсов вашего приложения: JAR файлов, библиотек и файлов конфигурации. 
# Класс не определён в атрибуте <font face=Courier>ClassPath</font> файла манифеста, при запуске программы с помощью команды <font face=Courier>jar</font>. 
#* Если вы используете файл сборки ANT для создания JAR архива и файла манифеста, то проверьте получает ли скрипт сборки ANT правильное значение <font face=Courier>classpath</font> и добавляет ли его в файл <font face=Courier>manifest.mf</font>.
# Виртуальная машина Java не нашла одну из зависимостей, например, нативную библиотеку. Эта ошибка выбрасывается поскольку <font face=Courier>NoClassDefFoundError</font> является наследником <font face=Courier>java.lang.LinkageError</font>.
#* Храните ваши dll совместно с jar-файлами.
# Виртуальная машина Java не смогла завершить статическую инициализацию класса. 
#* Проверьте наличие ошибки <font face=Courier>java.lang.ExceptionInInitializerError</font> в вашем журнале ошибок. 
# Родительский загрузчик классов не видит класс, поскольку тот был уже загружен дочерним загрузчиком. Если вы работаете со средой J2EE, то неверная настройка видимости класса среди загрузчиков классов может также привести к <font face=Courier>java.lang.NoClassDefFoundError</font>. 
# Опечатка в XML конфигурации также может привести к <font face=Courier>NoClassDefFoundError</font> в Java. Большинство программных платформ вроде Spring и Struts используют XML конфигурации для определения бинов. Случайно перепутав имя бина, вы можете получить <font face=Courier>java.lang.NoClassDefFoundError</font> при загрузке другого класса, который зависит от бина. Это случается довольно часто в программных платформах Spring MVC и Apache Struts, где вы получаете тонны ошибок <font face=Courier>Exception in thread "main" java.lang.NoClassDefFoundError</font> во время установки WAR или EAR файла. 
# Переменные окружения или JDK установлены неверно.
#* Проверьте переменные <font face=Courier>PATH</font> и <font face=Courier>JAVA_HOME</font>.
#* Поставьте JDK другой версии.

<br><br><br><br>

== Загрузчик классов в Java ==

Вкратце напомним, что загрузчик классов использует три основных принципа в своей работе: делегирование, видимость и уникальность. 

*Делегирование означает, что каждый запрос на загрузку класса делегируется родительскому загрузчику классов. 
*Видимость означает возможность найти классы загруженные загрузчиком классов: все дочерние загрузчики классов могут видеть классы, загруженные родительским загрузчиком, но родительский загрузчик не может видеть класс, загруженный дочерним. 
*Уникальность гарантирует, что класс, загруженный родительским загрузчиком, не загружается повторно дочерним загрузчиком. 

Каждый экземпляр загрузчика классов имеет связанный с ним родительский загрузчик классов. Предположим, загрузчик классов вашего приложения должен загрузить класс <font face=Courier>A</font>. Первым делом загрузчик классов  вашего приложения попытается ''делегировать'' поиск класса <font face=Courier>A</font> своему родительскому загрузчику, прежде чем сам попытается его загрузить. Вы можете пройтись по длинной цепочке родительских загрузчиков пока не дойдёте стартового загрузчика виртуальной машины Java. 

Так в чём же тут проблема? Если класс <font face=Courier>A</font> найден и загружен каким-нибудь родительским загрузчиком это значит, что дочерний загрузчик загружать его уже не будет, а вы, возможно, именно этого и ждёте, что и приводит к <font face=Courier>NoClassDefFoundError</font>. 

Для лучшего понимания изобразим весь процесс загрузки в контексте платформы Java EE. 

[[File:ClassLoaderDelegation.png | Схема делегирования загрузки в контексте платформы Java EE]]

Как вы можете видеть при попытке загрузки класса дочерний загрузчик (Web App #1) делегирует загрузку родительскому загрузчику (Java EE App #1), который в свою очередь делегирует её системному стартовому загрузчику JVM. Если системный стартовый загрузчик не может загрузить класс, он возвращает управление родительскому загрузчику и так далее по цепочке по класс не будет загружен каким-либо загрузчиком.

Рассмотрим простой пример, приводящий к  <font face=Courier>NoClassDefFoundError</font> из-за разной видимости классов между дочерним и родительским загрузчиками. Сделаем свой загрузчик <font face=Courier>MyClassLoader</font>, наследник от <font face=Courier>java.lang.ClassLoader</font> такой, чтоб он загружал классы с расширением <font face=Courier>.test</font> вместо <font face=Courier>.class</font>, находящиеся в пакете <font face=Courier>net.javacogito</font>. Отметим, что стандартный загрузчик по умолчанию загружает данные только из файлов с расширением <font face=Courier>.class</font>, так что загрузить <font face=Courier>Bar.test</font> он не сможет. Схема дальнейшей работы такая:

# JVM загружает класс <font face=Courier>Bar</font> из файла <font face=Courier>Bar.test</font>. 
# Класс <font face=Courier>Bar</font> печатает свой загрузчик классов. Это <font face=Courier>MyClassLoader</font>.
# JVM загружает класс <font face=Courier>Foo</font> из файла <font face=Courier> Foo.class</font>.
# Класс <font face=Courier>Foo</font> печатает свой загрузчик классов. Это <font face=Courier>sun.misc.Launcher.AppClassLoader</font>.
# Класс <font face=Courier>Foo</font> вызывает статический метод <font face=Courier>printClassLoader()</font> у класса <font face=Courier>Bar</font>.

В этот момент JVM выдаёт <font face=Courier>NoClassDefFoundError</font>, не смотря на то, что <font face=Courier>Bar</font> был загружен ранее, поскольку родительский загрузчик <font face=Courier>AppClassLoader</font> не видит классы, загруженные дочерним загрузчиком <font face=Courier>MyClassLoader</font>.

Ниже на рисунке изображена схема делегирования загрузки, приводящая к <font face=Courier>NoClassDefFoundError</font>.

[[File:ClassLoadingDelegationExample.png | Схема делегирования загрузки]]

Исходный код. Класс <font face=Courier>Bar</font>.

<syntaxhighlight lang="java">
package net.javacogito;
public class Bar {
    public static void printClassLoader() {
        System.out.println("Bar ClassLoader: " + Bar.class.getClassLoader());
    }
}
</syntaxhighlight>

Класс <font face=Courier>Foo</font>.

<syntaxhighlight lang="java">
package net.javacogito;
public class Foo {
    public static  void printBarClassLoader(){
        Bar.printClassLoader();
    }
    public static void printClassLoader() {
        System.out.println("Foo ClassLoader: " + Foo.class.getClassLoader());
    }
}
</syntaxhighlight>

Класс <font face=Courier>MyClassLoader</font>.

<syntaxhighlight lang="java">
package net.javacogito;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
public class MyClassLoader extends ClassLoader{
    public MyClassLoader(ClassLoader parent) {
        super(parent);
    }
    @Override
    public Class loadClass(String name) throws ClassNotFoundException {
        System.out.println("Loading Class '" + name + "'");
        if (name.startsWith("net.javacogito")) {
            System.out.println("Loading Class using MyClassLoader");
            return getClass(name);
        }
        return super.loadClass(name);
    }
    private Class getClass(String name) throws ClassNotFoundException {
        String file = name.replace('.', File.separatorChar) + ".test";
        byte[] b = null;
        try {
            b = loadClassFileData(file);
            Class c = defineClass(name, b, 0, b.length);
            resolveClass(c);
            return c;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
    private byte[] loadClassFileData(String name) throws IOException {
        InputStream stream = getClass().getClassLoader().getResourceAsStream(name);
        int size = stream.available();
        byte buff[] = new byte[size];
        DataInputStream in = new DataInputStream(stream);
        in.readFully(buff);
        in.close();
        return buff;
    }
}
</syntaxhighlight>

Класс <font face=Courier>Runner</font>.

<syntaxhighlight lang="java">
package net.javacogito;
import java.lang.reflect.Method;
public class Runner {
    public static void main(String[] args) throws Exception{
        MyClassLoader myClassLoader = new MyClassLoader(Runner.class.getClassLoader());
        Class clazz = myClassLoader.loadClass("net.javacogito.Bar");
        Method printClassLoader = clazz.getMethod("printClassLoader");
        printClassLoader.invoke(null, new Object[0]);
        Foo.printClassLoader();
        Foo.printBarClassLoader();
    }
}
</syntaxhighlight>

Порядок запуска.

<syntaxhighlight lang="bash">cd src/main/java
javac net/javacogito/Runner.java 
mv net/javacogito/Bar.class net/javacogito/Bar.test
java net.javacogito.Runner 
</syntaxhighlight>

Результат запуска.

<syntaxhighlight lang="bash">
Loading Class 'net.javacogito.Bar'
Loading Class using MyClassLoader
Loading Class 'java.lang.Object'
Loading Class 'java.lang.System'
Loading Class 'java.lang.StringBuilder'
Loading Class 'java.lang.Class'
Loading Class 'java.io.PrintStream'
Bar ClassLoader: net.javacogito.MyClassLoader@527c6768
Foo ClassLoader: sun.misc.Launcher$AppClassLoader@3326b249
Exception in thread "main" java.lang.NoClassDefFoundError: net/javacogito/Bar
        at net.javacogito.Foo.printBarClassLoader(Foo.java:5)
        at net.javacogito.Runner.main(Runner.java:16)
Caused by: java.lang.ClassNotFoundException: net.javacogito.Bar
        at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
        ... 2 more
</syntaxhighlight>

Из результатов запуска видно, что <font face=Courier>MyClassLoader</font> загрузил класс <font face=Courier>Bar</font>, а <font face=Courier>AppClassLoader</font> (наследник абстрактно класса <font face=Courier>java.lang.ClassLoader</font>) загрузил класс <font face=Courier>Foo</font>. Класс <font face=Courier>Bar</font> присутствует в файловой системе и JVM его загрузила, но родительский загрузчик <font face=Courier>ClassLoader</font> не видит его, что и приводит к <font face=Courier>NoClassDefFoundError</font>.

<br><br><br><br>

== <font face=Courier>NoClassDefFoundError</font> в Java из-за исключения в статическом инициализирующем блоке == 

Исключения в статическом инициализирующем блоке - другая частая причина <font face=Courier>java.lang.NoClassDefFoundError</font>. Ваш класс выполняет некоторую статическую инициализацию в статическом блоке. Например, многие синглетоны инициализируют себя в статическом блоке, чтобы получить преимущества потоко-безопасности, предоставляемые виртуальной машиной  Java во время процесса инициализации класса. В этом случае, если статический блок выбросит исключение, то класс, ссылающийся на этот синглетон, выбросит <font face=Courier>NoclassDefFoundError</font> в Java. При просмотре вашего журнала ошибок вы должны внимательно следить, не возникла ли ошибка <font face=Courier>java.lang.ExceptionInInitializerError</font>, поскольку она может привести к <font face=Courier>java.lang.NoClassDefFoundError: Could not initialize class</font> в другом месте. Как и в примере кода ниже, во время загрузки и инициализации класс <font face=Courier>User</font> выбрасывает исключение из статического инициализирующего блока, что приводит к <font face=Courier>ExceptionInInitializerError</font> во время первой загрузки класса <font face=Courier>User</font> при вызове <font face=Courier>new User()</font>. Дальше все остальные вызовы <font face=Courier>new User()</font> завершаются <font face=Courier>java.lang.NoClassDefFoundError</font>.  Ситуация становится намного хуже, если исходную ошибку <font face=Courier>ExceptionInInitializerError</font>, являющуюся первопричиной, скрывает последующий код.

<syntaxhighlight lang="java">
/**
* Java program to demonstrate how failure of static initialization subsequently cause
* java.lang.NoClassDefFoundError in Java.
* @author Javin Paul
*/
public class NoClassDefFoundErrorDueToStaticInitFailure {
    public static void main(String args[]){
        List<User> users = new ArrayList<User>(2);
        for(int i=0; i<2; i++){
        try{
            users.add(new User(String.valueOf(i))); //will throwNoClassDefFoundError
        }catch(Throwable t){
            t.printStackTrace();
            }
        }
    }
}

class User{
private static String USER_ID = getUserId();
public User(String id){
    this.USER_ID = id;
}
private static String getUserId() {
    throw new RuntimeException("UserId Not found");
    }
}
</syntaxhighlight>

Результат запуска.

<syntaxhighlight lang="bash">
java.lang.ExceptionInInitializerError
at testing.NoClassDefFoundErrorDueToStaticInitFailure.main(NoClassDef
FoundErrorDueToStaticInitFailure.java:23)
Caused by: java.lang.RuntimeException: UserId Not found at
testing.User.getUserId(NoClassDefFoundErrorDueToStaticInitFailure.java:41)
at testing.User.<clinit>(NoClassDefFoundErrorDueToStaticInitFailure.java:35)
... 1 more
java.lang.NoClassDefFoundError: Could not initialize class
testing.User
at testing.NoClassDefFoundErrorDueToStaticInitFailure.main(NoClassDef
FoundErrorDueToStaticInitFailure.java:23)
</syntaxhighlight>

== Перечень использованных ссылок ==

# http://javarevisited.blogspot.com/2011/07/classnotfoundexception-vs.html
# http://javarevisited.blogspot.com/2011/06/noclassdeffounderror-exception-in.html
# http://stackoverflow.com/questions/1457863/what-is-the-difference-between-noclassdeffounderror-and-classnotfoundexception
# http://www.javacodegeeks.com/2012/06/javalangnoclassdeffounderror-how-to.html

[[Категория:Переводы на русский язык]]

