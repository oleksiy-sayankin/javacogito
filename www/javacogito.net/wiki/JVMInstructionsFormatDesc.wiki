{| width="100%"
| style="text-align:left;"  | '''''aaload'''''
| style="text-align:right;"  | '''''aaload'''''
|}
<br>
{| style="border-collapse:collapse;" 
| width="150px" style="vertical-align:top;" | '''Операция''' 
|Загружает ссылку из массива 
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" | '''Формат'''
| 
{| border="1" style="border-collapse:collapse;" width="400px"
|''aaload''
|}
|}
<br>
{| style="border-collapse:collapse;" 
| width="150px" style="vertical-align:top;" | '''Формы''' 
|''aaload'' = 50 (0x32) 
|}
<br>
{| style="border-collapse:collapse;" 
| width="150px" style="vertical-align:top;"| '''Стек операндов''' 
| ..., ''ссылка на массив'', ''индекс'' → 
|-
|
|
|-
|
| ..., ''значение''
|}
<br>
{| style="border-collapse:collapse;" 
| width="150px" style="vertical-align:top;" | '''Описание''' 
| style="vertical-align:top;"|Значение ''ссылки на массив'' должно быть типа <font face=Courier>reference</font> и должно ссылаться на массив, чьи компоненты также принадлежат типу <font face=Courier>reference</font>. Значение ''индекса'' должно быть типа <font face=Courier>int</font>. Как ''ссылка на массив'' так и ''индекс'' считываются из стека операндов. ''Значение'' типа <font face=Courier>reference</font> считывается из элемента массива с индексом ''индекс'' и записывается в стек операндов.
 
|}
<br>
{| style="border-collapse:collapse;" 
| width="150px" style="vertical-align:top;" | '''Исключения времени выполнения''' 
| style="vertical-align:top;"|Если значение ''ссылки на массив'' равно <font face=Courier>null</font>, то инструкция ''aaload'' генерирует исключение <font face=Courier>NullPointerException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''aastore'''''
| style="text-align:right;"  | '''''aastore'''''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Операция'''
|Сохраняет ссылку (<font face=Courier>reference</font>) из стека в массив
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
|''aastore''
|}
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формы'''
|''aastore''= 83 (0x53)
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Стек операндов'''
|..., ''ссылка на массив'', ''индекс'', ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Описание'''
|Значение ''ссылки на массив'' должно быть типа <font face=Courier>reference</font> и должно ссылаться на массив, чьи компоненты также принадлежат типу <font face=Courier>reference</font>. Значение ''индекса'' должно быть типа <font face=Courier>int</font>, ''значение'' должно быть типа <font face=Courier>reference</font>. ''Значение'', ''ссылка на массив'' и ''индекс'' считываются из стека операндов. ''Значение'' типа <font face=Courier>reference</font> сохраняется в элементе массива с ''индекс''ом ''индекс''.

Во время выполнения тип ''значения'' должен быть совместим с типом компонентов массива, на который ссылается ''ссылка на массив''. 

Присваивание ссылочного типа <font face=Courier>''S''</font> (источник) типу <font face=Courier>''T''</font> (приёмник) допустимо тогда и только тогда:

* Если <font face=Courier>''S''</font> - это класс, тогда:
** Если <font face=Courier>''T''</font> – это класс, то <font face=Courier>''S''</font> должно быть такого же класса, как и <font face=Courier>''T''</font> либо <font face=Courier>''S''</font> должно быть наследником <font face=Courier>''T''</font>;
** Если <font face=Courier>''T''</font> – это интерфейс, то <font face=Courier>''S''</font> должно реализовывать этот интерфейс;
* Если <font face=Courier>''S''</font> - это интерфейс, тогда:
** Если <font face=Courier>''T''</font> – это класс, тогда <font face=Courier>''T''</font> должно быть типа <font face=Courier>Object</font>.
** Если <font face=Courier>''T''</font> – это интерфейс, то <font face=Courier>''S''</font> должно быть тем же интерфейсом или интерфейсом-предком <font face=Courier>''S''</font>.
* Если <font face=Courier>''S''</font> – это массив (назовём его <font face=Courier><font face=Courier>''SC''</font></font>[], что значит массив с компонентами типа <font face=Courier><font face=Courier>''SC''</font></font>), тогда:
** Если <font face=Courier>''T''</font> – это класс, тогда <font face=Courier>''T''</font> должен быть <font face=Courier>Object</font>.
** Если <font face=Courier>''T''</font> – это интерфейс, тогда <font face=Courier>''T''</font> должно быть одним из интерфейсов, которые реализует массив (см. JLS §4.10.3).
** Если <font face=Courier>''T''</font> – массив <font face=Courier><font face=Courier>''TC''</font></font>[],  что значит массив с компонентами типа <font face=Courier><font face=Courier>''TC''</font></font>, тогда одно из следующих утверждений должно быть истинным:
*** <font face=Courier><font face=Courier>''TC''</font></font> и <font face=Courier><font face=Courier>''SC''</font></font> принадлежат одному примитивному типу.
*** <font face=Courier><font face=Courier>''TC''</font></font> и <font face=Courier><font face=Courier>''SC''</font></font> ссылочные типы и <font face=Courier><font face=Courier>''SC''</font></font> можно присвоить <font face=Courier><font face=Courier>''TC''</font></font>.
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Исключения времени выполнения'''
|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то инструкция ''aaload'' генерирует исключение <font face=Courier>NullPointerException</font>.
В противном случае, если ''индекс'' вне границ массива, на который ссылается ''ссылка на массив'', то ''aastore'' генерирует исключение <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''aconst_null'''''
| style="text-align:right;"  | '''''aconst_null'''''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Операция'''
|Записывает в стек <font face=Courier>null</font>
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
|''aconst_null''
|}
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формы'''
|''aconst_null''= 1 (0x1)
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Стек операндов'''
|... →

..., null
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Описание'''
|Записывает в стек операндов ссылку на <font face=Courier>null</font> объект.
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Примечания'''
|Виртуальная машина Java не определяет конкретного значения для <font face=Courier>null</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''aload'''''
| style="text-align:right;"  | '''''aload'''''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Операция'''
|Загружает ссылку из локальной переменной в стек
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
|aload
|-
|индекс
|}
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формы'''
|''aload'' = 25 (0x19)
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Стек операндов'''
|..., →

..., ''ссылка на объект''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Описание'''
|''Индекс'' представляет собой беззнаковый байт, который определяет локальную переменную текущего фрейма (§2.6). Локальная переменная с указанным индексом должна содержать ''значение'' типа <font face=Courier>reference</font>. ''Ссылка на объект'' из локальной переменной записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Примечания'''
|Инструкция ''aload'' не может быть использована для записи в стек операндов значений типа <font face=Courier>returnAddress</font> из локальной переменной. Эта асимметрия с инструкцией ''astore'' сделана намеренно. 

Инструкция ''aload'' может быть использована с инструкцией ''wide'' для доступа к локальным переменным, имеющим двухбайтовый индекс.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''aload_<n>'''''
| style="text-align:right;"  | '''''aload_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Операция'''
|Загружает ссылку из локальной переменной в стек
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
|''aload_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Формы'''
|''aload_0''= 42 (0x2a)

''aload_1''= 43 (0x2b)

''aload_2''= 44 (0x2c)

''aload_3''= 45 (0x2d)
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Стек операндов'''
|..., →

..., ''ссылка на объект''
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Описание'''
|Значение <n> должно быть индексом локальной переменной текущего фрейма (см. §2.6). Локальная переменная с индексом <n> должна содержать ''значение'' типа <font face=Courier>reference</font>. ''Ссылка на объект'', находящаяся в локальной переменной с индексом <n> записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
| width="150px" style="vertical-align:top;" |'''Примечания'''
|Инструкция ''aload_<n>'' не может быть использована для записи в стек операндов значений типа <font face=Courier>returnAddress</font> из локальной переменной. Эта асимметрия с инструкцией ''astore_<n>'' сделана намеренно. 

Каждая из инструкций ''aload_<n>''  выполняет то же, что и ''aload'' с явно заданным индексом.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''anewarray'''''
| style="text-align:right;"  | '''''anewarray'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Создаёт новый массив из ссылок
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''anewarray''
|-
| style="vertical-align:top;"|''байт_индекса1''
|-
| style="vertical-align:top;"|''байт_индекса2''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''anewarray'' = 189 (0xbd)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''число элементов'' →

..., ''ссылка на массив''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Число элементов должно принадлежать типу <font face=Courier>int</font>. Оно считывается из стека операндов. Число элементов определяет размер массива. Беззнаковые ''байт_индекса1'' и ''байт_индекса2'' используются для построения ''индекса'' массива в константном пуле времени выполнения текущего класса (см. §2.6). ''Значение'' ''индекса'' определяется как (''байт_индекса1'' << 8)<nowiki>|</nowiki>(''байт_индекса2''). Элемент константного пула, на который указывает построенный ''индекс'', должен быть ссылкой на класс, массив или интерфейс. Обозначенный класс, массив или интерфейс разрешается (см. §5.4.3.1) и определяется тип элементов массива. В куче создаётся новый массив, с указанным типом элементов, заданной размерностью. Ссылка на созданный массив записывается в стек операндов. Все элементы инициализируются значениями <font face=Courier>null</font>, которые являются значениями по умолчанию для типа <font face=Courier>reference</font> (см. §2.4)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения связывания'''
| style="vertical-align:top;"|Во время разрешения символьной ссылки на класс, массив или интерфейс, может быть создано любое исключение, описанное в (§5.4.3.1).
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''число элементов'' меньше нуля, инструкция ''anewarray'' генерирует <font face=Courier>NegativeArraySizeException</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''anewarray'' используется для создания одномерного массива ссылок на объекты или части многомерного массива.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''areturn'''''
| style="text-align:right;"  | '''''areturn'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Создаёт новый массив из ссылок
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''areturn''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''areturn''= 176 (0xb0)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на объект'' →

[пусто]
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на объект'' должна принадлежать типу <font face=Courier>reference</font> и должна ссылаться на объект, тип которого совместим по присвоению  (см. JLS §5.2) с типом возвращаемого ''значения'', заданным в дескрипторе текущего метода (см. §4.3.3). Если текущий метод объявлен как <font face=Courier>synchronized</font>, то происходит захват (или повторный захват) монитора, при запуске метода, и освобождение монитора при выполнении ''areturn'', так как если бы была выполнена инструкция ''monitorexit'' в текущем потоке. Если в ходе выполнения метода не было сгенерировано исключение, ''ссылка на объект'' считывается из стека операндов текущего фрейма (см. §2.6) и записывается в стек операндов вызывающего метода. Все значения в стеке операндов текущего фрейма теряются. 

Интерпретатор восстанавливает вызывающий фрейм и передаёт управление вызвавшему методу.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|''Ссылка на объект'' должна принадлежать типу <font face=Courier>reference</font> и должна ссылаться на объект, тип которого совместим по присвоению  (см. JLS §5.2) с типом возвращаемого ''значения'', заданным в дескрипторе текущего метода (см. §4.3.3). Если текущий метод объявлен как <font face=Courier>synchronized</font>, то происходит захват (или повторный захват) монитора, при запуске метода, и освобождение монитора при выполнении ''areturn'', так как если бы была выполнена инструкция ''monitorexit'' в текущем потоке. Если в ходе выполнения метода не было сгенерировано исключение, ''ссылка на объект'' считывается из стека операндов текущего фрейма (см. §2.6) и записывается в стек операндов вызывающего метода. Все значения в стеке операндов текущего фрейма теряются. 

Интерпретатор восстанавливает вызывающий фрейм и передаёт управление вызвавшему методу.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''arraylength'''''
| style="text-align:right;"  | '''''arraylength'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Возвращает длину массива
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''arraylength''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''arraylength''= 190 (0xbe)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'' →

..., ''длина массива''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна принадлежать типу <font face=Courier>reference</font>. Она считывается из стека операндов. Определяется ''длина массива'' по указанной ссылке. Эта ''длина массива'' записывается в стек операндов как значение типа <font face=Courier>int</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>,  ''arraylength'' генерирует <font face=Courier>NullPointerException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''astore'''''
| style="text-align:right;"  | '''''astore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Считывает ссылку из стека и сохраняет в локальную переменную
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''astore''
|-
| style="vertical-align:top;"|''индекс''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''astore''= 58 (0x3a)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на объект'' →

...,
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Индекс'' представляет собой беззнаковый байт, являющейся индексом локальной переменной текущего фрейма (см. §2.6). ''Ссылка на объект'' на вершине стека операндов должна принадлежать типу <font face=Courier>returnAddress</font> или <font face=Courier>reference</font>. Ссылка считывается из стека операндов и записывается в локальную переменную с заданным индексом.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''astore'' совместно со ссылкой типа <font face=Courier>returnAddress</font> используется для реализации блока <font face=Courier>finally</font> в языке программирования Java (см. §3.13).

Инструкция ''aload'' не может быть использована для загрузки значения типа  <font face=Courier>returnAddress</font> из локальной переменной в стек операндов. Эта асимметрия с ''astore'' сделана намеренно.

Также ''astore'' может быть использована с инструкцией ''wide'', которая расширяет значения индекса локальной переменной до двух байт.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''astore_<n>'''''
| style="text-align:right;"  | '''''astore_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Считывает ссылку из стека и сохраняет в локальную переменную
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''astore_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''astore_0''= 75 (0x4b)

''astore_1''= 76 (0x4c)

''astore_2''= 77 (0x4d)

''astore_3''= 78 (0x4e)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на объект'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|<n> представляет собой беззнаковый байт, являющейся индексом локальной переменной текущего фрейма (см. §2.6). ''Ссылка на объект'' на вершине стека операндов должна принадлежать типу <font face=Courier>returnAddress</font> или <font face=Courier>reference</font>. Ссылка считывается из стека операндов и записывается в локальную переменную с заданным индексом <n>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''astore_<n>'' совместно со ссылкой типа <font face=Courier>returnAddress</font> используется для реализации блока <font face=Courier>finally</font> в языке программирования Java (см. §3.13).

Инструкция ''aload_<n>'' не может быть использована для загрузки значения типа  <font face=Courier>returnAddress</font> из локальной переменной в стек операндов. Эта асимметрия с ''astore_<n>'' сделана намеренно.

Каждая инструкция ''astore_<n>'' выполняет то же самое, что и инструкция ''astore'' с ''индексом'' равным <n>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''athrow'''''
| style="text-align:right;"  | '''''athrow'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Выбрасывает исключение
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''athrow''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''athrow''= 191 (0xbf)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на объект''→

''ссылка на объект''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на объект''  должна принадлежать типу <font face=Courier>reference</font> и должна ссылаться на объект класса <font face=Courier>Throwable</font> или его наследника. Она считывается из стека операндов. Затем в текущем методе (см. §2.6) первого подходящего обработчика по алгоритму, указанному в §2.10.

Если обработчик исключения соответствующий ссылке на объект (т.е. соответствующему исключению) был найден, то в нем находится ссылка на первую инструкцию кода, который должен быть выполнен. В регистр <font face=Courier>pc</font> записывается адрес первой инструкции кода, стек операндов текущего фрейма очищается, ''ссылка на объект'' записывается обратно в стек и выполнение продолжается.

Если обработчик не найден в текущем фрейме, текущий фрейм считывается из стека фреймов. Если текущий метод был объявлен как <font face=Courier>synchronized</font>, захваченный при входе в метод монитор отпускается, как если была выполнена инструкция ''monitorexit''. Фрейм вызывающего метода (если таковой существует) становится текущим и исключение выбрасывается повторно. Если такого фрейма нет, происходит выход из текущего потока.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на объект'' равна <font face=Courier>null</font>, инструкция ''athrow'' генерирует <font face=Courier>NullPointerException</font>.

В противном случае, если реализация виртуальной машины Java не поддерживает правила структурной блокировки, описанные в §2.11.10, тогда если метод текущего фрейма объявлен как <font face=Courier>synchronized</font> и текущий поток не является владельцем монитора, захваченного при входе в метод, то генерируется исключение <font face=Courier>IllegalMonitorStateException</font> вместо исключения выброшенного ранее. Это может произойти, если аварийно прерванный <font face=Courier>synchronized</font> метод содержит инструкцию ''monitorexit'', а соответствующей инструкции  ''monitorenter'' для того же объекта синхронизации нет.

Если реализация виртуальной машины Java поддерживает правила структурной блокировки, описанные в §2.11.10 и первое из этих правил нарушено во время вызова метода, тогда ''athrow'' генерирует <font face=Courier>IllegalMonitorStateException</font> вместо выбрасываемого до этого исключения.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Описание стека операндов для инструкции ''athrow'' может сбивать с толку: если обработчик найден в текущем методе, инструкция ''athrow'' очищает стек операндов, а затем записывает в стек ссылку на выбрасываемое исключение. Однако, такое решение вполне приемлемо, поскольку, если соответствующего обработчика в текущем методе не найдено, то исключение будет выброшено далее по цепочке вызовов методов и если обработчик будет найден, стек будет очищен и ссылка на исключение помещена в стек. Все промежуточные фрейм из цепочки вызова методов, в которых обработчик не был найден, также будут очищены.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''baload'''''
| style="text-align:right;"  | '''''baload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>byte</font> или <font face=Courier>boolean</font> из массива в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''baload''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''baload'' = 51 (0x33)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'' →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна принадлежать типу <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты являются типами <font face=Courier>byte</font> или <font face=Courier>boolean</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', так и  ''индекс'' считываются из стека операндов. ''Значение'' типа <font face=Courier>byte</font> считывается из элемента массива с заданным индексом, расширяется с учётом знака до типа <font face=Courier>int</font> и записывается вершину стека операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''baload'' генерирует <font face=Courier>NullPointerException</font>.

Если ''индекс'' вне границ массива, то ''baload'' генерирует <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''baload'' используется для получения значений из массивов как типа <font face=Courier>byte</font>, так и типа <font face=Courier>boolean</font>. В реализации виртуальной машины Java компании Oracle массивы значений типа <font face=Courier>boolean</font> (тип <font face=Courier>T_BOOLEAN</font> (см. §2.2)), представлены как массивы, хранящие 8 бит информации на одно значение типа <font face=Courier>boolean</font>. Другие реализации могут использовать упакованные массивы для хранения <font face=Courier>boolean</font>; инструкция ''baload'' также должна использоваться и для доступа к таким массивам.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''bastore'''''
| style="text-align:right;"  | '''''bastore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>byte</font> или <font face=Courier>boolean</font> в массив из стека
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''bastore''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''bastore''= 84 (0x54)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'', ''значение''→

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна принадлежать типу <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты являются типами <font face=Courier>byte</font> или <font face=Courier>boolean</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', ''индекс'' так и ''значение'' считываются из стека операндов. ''Значение'', принадлежащее типу <font face=Courier>int</font>, урезается до типа <font face=Courier>byte</font> и записывается в массив, в элемент с заданным индексом.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, ''bastore'' генерирует <font face=Courier>NullPointerException</font>.

Если ''индекс'' вне границ массива, то ''bastore'' генерирует <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''bastore'' используется для записи в массив значений как типа <font face=Courier>byte</font> так и типа <font face=Courier>boolean</font>. В реализации виртуальной машины компании Oracle массивы значений типа <font face=Courier>boolean</font> (тип <font face=Courier>T_BOOLEAN</font> (см. §2.2)), представлены как массивы, хранящие 8 бит информации на одно значение типа <font face=Courier>boolean</font>. Другие реализации могут использовать упакованные массивы для хранения <font face=Courier>boolean</font>; инструкция ''bastore'' также должна использоваться и для записи значений в такие массивы.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''bipush'''''
| style="text-align:right;"  | '''''bipush'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает значение типа <font face=Courier>byte</font> в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''bipush''
|-
| style="vertical-align:top;"|байт
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''bipush''= 16 (0x10)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|С помощью знакового расширения ''значение'' байта преобразуется к типу <font face=Courier>int</font> и записывается в стек операндов.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''caload'''''
| style="text-align:right;"  | '''''caload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>char</font> из массива в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''caload''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''caload''= 52 (0x34)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'' →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна принадлежать типу <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты являются типами <font face=Courier>char</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', так и  ''индекс'' считываются из стека операндов. ''Значение'' считывается из элемента массива с заданным индексом, расширяется без учёта знака до типа <font face=Courier>int</font> и записывается вершину стека операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''caload'' генерирует <font face=Courier>NullPointerException</font>.

Если ''индекс'' вне границ массива, то ''caload'' генерирует <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''castore'''''
| style="text-align:right;"  | '''''castore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>char</font> в массив
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''castore''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''castore''= 85 (0x55)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'', ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна принадлежать типу <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты являются типами <font face=Courier>char</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', ''индекс'' так и ''значение'' считываются из стека операндов. ''Значение'', принадлежащее типу <font face=Courier>char</font>, урезается до типа <font face=Courier>byte</font> и записывается в массив, в элемент с заданным индексом.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, ''castore'' генерирует <font face=Courier>NullPointerException</font>.

Если ''индекс'' вне границ массива, то ''castore'' генерирует <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''checkcast'''''
| style="text-align:right;"  | '''''checkcast'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Проверяет, принадлежит ли объект заданному типу
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''checkcast''
|-
| style="vertical-align:top;"|''байт_индекса1''
|-
| style="vertical-align:top;"|''байт_индекса2''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''checkcast''= 192 (0xc0)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на объект'' →

..., ''ссылка на объект''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на объект'' должна принадлежать типу <font face=Courier>reference</font>. Беззнаковые ''байт_индекса1'' и ''байт_индекса2'' используются для построения индекса массива в константном пуле времени выполнения текущего класса (см. §2.6). Значение индекса определяется как (''байт_индекса1'' << 8)<nowiki>|</nowiki>(''байт_индекса2''). Элемент константного пула, на который указывает построенный индекс, должен быть ссылкой на класс, массив или интерфейс.

Если ''ссылка на объект'' равна <font face=Courier>null</font>, то содержимое стека операндов не меняется.

В противном случае класс, массив или интерфейс разрешается (см. §5.4.3.1). Если ''ссылка на объект'' может быть преобразована к разрешённому ранее классу, массиву или интерфейсу, то стек операндов не меняется. В противном случае инструкция ''checkcast'' генерирует исключение <font face=Courier>ClassCastException</font>.

Если ''ссылка на объект''  не равна <font face=Courier>null</font>, то используются следующие правила для разрешения типов: если <font face=Courier>''S''</font>  - класс, на который  ссылается ''ссылка на объект'', а <font face=Courier>''T''</font> – разрешаемый класс, массив или интерфейс, то ''checkcast'' проверяет следующее:
* Если <font face=Courier>''S''</font> - это класс, тогда:
** Если <font face=Courier>''T''</font> – это класс, то <font face=Courier>''S''</font> должно быть такого же класса, как и <font face=Courier>''T''</font> либо <font face=Courier>''S''</font> должно быть наследником <font face=Courier>''T''</font>;
** Если <font face=Courier>''T''</font> – это интерфейс, то <font face=Courier>''S''</font> должно реализовывать этот интерфейс;
* Если <font face=Courier>''S''</font> - это интерфейс, тогда:
** Если <font face=Courier>''T''</font> – это класс, тогда <font face=Courier>''T''</font> должно быть типа <font face=Courier>Object</font>.
** Если <font face=Courier>''T''</font> – это интерфейс, то <font face=Courier>''S''</font> должно быть тем же интерфейсом или интерфейсом-предком <font face=Courier>''S''</font>.
* Если <font face=Courier>''S''</font> – это массив (назовём его <font face=Courier><font face=Courier>''SC''</font></font>[], что значит массив с компонентами типа <font face=Courier><font face=Courier>''SC''</font></font>), тогда:
** Если <font face=Courier>''T''</font> – это класс, тогда <font face=Courier>''T''</font> должен быть <font face=Courier>Object</font>.
** Если <font face=Courier>''T''</font> – это интерфейс, тогда <font face=Courier>''T''</font> должно быть одним из интерфейсов, которые реализует массив (см. JLS §4.10.3).
** Если <font face=Courier>''T''</font> – массив <font face=Courier><font face=Courier>''TC''</font></font>[],  что значит массив с компонентами типа <font face=Courier><font face=Courier>''TC''</font></font>, тогда одно из следующих утверждений должно быть истинным:
*** <font face=Courier><font face=Courier>''TC''</font></font> и <font face=Courier><font face=Courier>''SC''</font></font> принадлежат одному примитивному типу.
*** <font face=Courier><font face=Courier>''TC''</font></font> и <font face=Courier><font face=Courier>''SC''</font></font> ссылочные типы и <font face=Courier><font face=Courier>''SC''</font></font> можно присвоить <font face=Courier><font face=Courier>''TC''</font></font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения связывания'''
| style="vertical-align:top;"|Во время разрешения символьной ссылки на класс, массив или интерфейс, может быть создано любое исключение, описанное в (§5.4.3.1).
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на объект'' не может быть преобразована к разрешённому классу, массиву или интерфейсу ''checkcast'' генерирует <font face=Courier>ClassCastException</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''checkcast'' очень похожа на инструкцию ''instanceof''. Они отличаются друг от друга реакцией на <font face=Courier>null</font> (''checkcast'' генерирует исключение, ''instanceof'' записывает код результата в стек) и влиянием на стек операндов.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''d2f'''''
| style="text-align:right;"  | '''''d2f'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует <font face=Courier>double</font> к <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''d2f''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''d2f''= 144 (0x90)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>double</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем ''новое значение'' преобразуется к типу <font face=Courier>float</font> согласно стандарту IEEE 754. Результат записывается в стек операндов.

Там, где инструкция ''d2f'' работает в режиме FP-strict (см. §2.8.2) результат преобразования всегда округляется к ближайшему представимому значению во множестве значений типа <font face=Courier>float</font> (см. §2.3.2)

Там, где инструкция ''d2f'' работает в не режиме FP-strict, результат преобразования  может быть взят расширенного набора значений с плавающей точкой (§2.3.2); оно не обязательно округляется к ближайшему представимому значению во множестве значений типа <font face=Courier>float</font>.

Если ''новое значение'' слишком мало, чтоб быть представленным как <font face=Courier>float</font>, оно преобразуется к нулю типа <font face=Courier>float</font> того же знака. Если ''новое значение'' слишком велико, чтоб быть представленным как <font face=Courier>float</font>, оно преобразуется к бесконечности типа <font face=Courier>float</font> того же знака. Не-число (NaN) типа <font face=Courier>double</font> преобразуется в не-число типа <font face=Courier>float</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''d2f'' выполняет сужающее преобразование примитивных типов, поэтому может преобразуемая величина быть потеряна полностью либо потеряна точность представления.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''d2i'''''
| style="text-align:right;"  | '''''d2i'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует <font face=Courier>double</font> к <font face=Courier>int</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''d2i''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''d2i''= 142 (0x8e)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>double</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем новое ''значение'' преобразуется к типу <font face=Courier>int</font>. Результат записывается в стек операндов.
* Если новое ''значение'' не-число NaN, ''результат'' преобразования <font face=Courier>int</font> 0.
* В противном случае, если новое ''значение'' не бесконечность, оно округляется к целочисленному <font face=Courier>''V''</font> согласно IEEE 754 (округление в направлении нуля). Если это целое число представимо в типе <font face=Courier>int</font>, то <font face=Courier>''V''</font> – ''результат'' преобразования.
* Если число <font face=Courier>''V''</font> не представимо в типе <font face=Courier>int</font> (оно слишком мало или является отрицательной бесконечностью) то ''результатом'' будет наименьшее число представимое в диапазоне <font face=Courier>int</font>. Либо <font face=Courier>''V''</font> не представимо в типе <font face=Courier>int</font>, поскольку оно слишком велико или является положительной бесконечностью, то ''результатом'' будет наибольшее число представимое в диапазоне <font face=Courier>int</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''d2i'' выполняет сужающее преобразование примитивных типов, поэтому может преобразуемая величина быть потеряна полностью либо потеряна точность представления.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''d2l'''''
| style="text-align:right;"  | '''''d2l'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует <font face=Courier>double</font> к <font face=Courier>long</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''d2l''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''d2l''= 143 (0x8f)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение''  →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>double</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем новое ''значение'' преобразуется к типу <font face=Courier>long</font>. Результат записывается в стек операндов.
* Если новое ''значение'' не-число NaN, ''результат'' преобразования <font face=Courier>long</font> 0.
* В противном случае, если новое ''значение'' не бесконечность, оно округляется к целочисленному <font face=Courier>''V''</font> согласно IEEE 754 (округление в направлении нуля). Если это целое число представимо в типе <font face=Courier>int</font>, то <font face=Courier>''V''</font> – ''результат'' преобразования.
* Если число <font face=Courier>''V''</font> не представимо в типе <font face=Courier>long</font> (оно слишком мало или является отрицательной бесконечностью) то ''результатом'' будет наименьшее число представимое в диапазоне <font face=Courier>long</font>. Либо <font face=Courier>''V''</font> не представимо в типе <font face=Courier>long</font>, поскольку оно слишком велико или является положительной бесконечностью, то ''результатом'' будет наибольшее число представимое в диапазоне <font face=Courier>long</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''d2l'' выполняет сужающее преобразование примитивных типов, поэтому может преобразуемая величина быть потеряна полностью либо потеряна точность представления.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dadd'''''
| style="text-align:right;"  | '''''dadd'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Складывает два числа типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dadd''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dadd''= 99 (0x63)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов, проходят преобразования (см. §2.8.3) становясь ''значением1''` и ''значением2''`. Результат типа <font face=Courier>double</font> равен сумме ''значение1''` + ''значение2''`. Результат записывается в стек операндов.

Суммирование производится согласно правилам арифметики IEEE:
Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Сумма двух бесконечностей противоположных знаков есть NaN.
* Сумма двух бесконечностей одинаковых знаков есть бесконечность того же знака.
* Сумма бесконечности и конечного числа есть бесконечность.
* Сумма двух нулей противоположных знаков есть положительный ноль.
* Сумма двух нулей одинаковых знаков есть ноль того же знака.
* Сумма двух не нулевых конечных значений одинаковой величины есть положительный ноль.
* В оставшихся случаях, когда ни один из операндов не бесконечность, не ноль и не NaN и ''значения'' имеют один знак или имеют разную величину, сумма вычисляется и округляется к ближайшему представимому значению согласно правилам округления IEEE 754. Если ''результат'' слишком велик, чтобы быть представленным как <font face=Courier>double</font>, мы говорим, что произошло переполнение. В этом случае ''результат'' есть бесконечность соответствующего знака. Если ''результат'' слишком мал, чтобы быть представленным как <font face=Courier>double</font>, мы говорим, что произошла потеря точности. В этом случае ''результат'' есть ноль соответствующего знака.

Инструкция ''dadd'' не генерирует исключение, если происходит переполнение или потеря точности.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''daload'''''
| style="text-align:right;"  | '''''daload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>double</font> из массива в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''daload''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''daload''= 49 (0x31)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'' →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна быть типа <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты ''значения'' типа <font face=Courier>double</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', так и ''индекс'' считываются из стека операндов. ''Значение'' типа <font face=Courier>double</font> считывается из элемента массива с соответствующим индексом и записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''daload'' генерирует <font face=Courier>NullPointerException</font>. В противном случае, если ''индекс'' вне границ массива, генерируется исключение <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dastore'''''
| style="text-align:right;"  | '''''dastore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>double</font> в массив
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dastore''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dastore''= 82 (0x52)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'', ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна быть типа <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты ''значения'' типа <font face=Courier>double</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>, ''значение'' должно принадлежать типу <font face=Courier>double</font>. ''Ссылка на массив'', ''индекс'' и ''значение'' считываются из стека операндов. Над значением проводится набор преобразований (см. §2.8.3), в результате которых ''значение''` сохраняется в массиве с заданным индексом.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''dastore'' генерирует <font face=Courier>NullPointerException</font>. В противном случае, если ''индекс'' вне границ массива, генерируется исключение <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dcmp<op>'''''
| style="text-align:right;"  | '''''dcmp<op>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Сравнивает два значения типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dcmp<op>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dcmpg''= 152 (0x98)

''dcmpl''= 151 (0x97)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. Сравнение значений с плавающей точкой производится следующим образом:
* Если ''значение1''` больше чем ''значение2''`, то в стек операндов записывается единица с типом <font face=Courier>int</font>.
* В противном случае, если ''значение1''` равно значению2`, то в стек операндов записывается ноль с типом <font face=Courier>int</font>.
* В противном случае, если ''значение1''` меньше чем ''значение2''`, то в стек операндов записывается минус единица с типом <font face=Courier>int</font>.
* В противном случае, по крайней мере, одно ''значение'' (либо ''значение1''`, либо ''значение2''`) есть не-число NaN. В этом случае инструкция ''dcmpg'' записывает 1 с типом <font face=Courier>int</font> в стек операндов, а инструкция ''dcmpl'' записывает -1 с типом <font face=Courier>int</font> в стек операндов.

Сравнение чисел с плавающей точкой выполняется согласно требованиям стандарта <font face=Courier>IEEE754</font>. Все ''значения'', отличные от не-числа NaN упорядочены, причём отрицательная бесконечность меньше чем все числа, а положительная бесконечность больше чем все числа. Положительный и отрицательный ноль считаются равными.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкции ''dcmpg'' и ''dcmpl'' отличаются только своим поведением при сравнении не-чисел NaN. Поскольку NaN не упорядочено, любое сравнения не-числа NaN и значения типа <font face=Courier>double</font> не определено, в случае, когда один либо оба операнда не-числа NaN. С помощью инструкций ''dcmpg'' и ''dcmpl'' любое сравнения чисел типа <font face=Courier>double</font> может быть скомпилировано так, чтобы выдавать результат, совпадающий и при сравнение обычных чисел и при сравнении не-чисел NaN. Более подробную информацию см. в §3.5.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dconst_<d>'''''
| style="text-align:right;"  | '''''dconst_<d>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает константу типа <font face=Courier>double</font> в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dconst_<d>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dconst_0''= 14 (0xe)

''dconst_1''= 15 (0xf)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|...→

... <d>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Записывает в стек операндов константу <d> (0.0 или 1.0) типа <font face=Courier>double</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''ddiv'''''
| style="text-align:right;"  | '''''ddiv'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Делит два значения типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''ddiv''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''ddiv''= 111 (0x6f)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. Результат – это число типа <font face=Courier>double</font> равное ''значение1''`/ ''значение2''`. Затем ''результат'' записывается в стек операндов.
Результат инструкции ''ddiv'' вычисляется согласно правилам арифметики стандарта IEEE:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата деления положительный, если делимое и делитель имеют один знак и отрицательный в противном случае.
* Деление бесконечности на бесконечность даёт не-число NaN.
* Деление бесконечности на конечное ''значение'' даёт бесконечность, знак которой определён по правилу, описанному выше.
* Деление конечного ''значения'' на бесконечность даёт знаковый ноль, знак которого определён по правилу, описанному выше.
* Деление ноль на ноль даёт не-число NaN; деление ноля на конечное ''значение'' даёт знаковый ноль, знак которого определён по правилу, описанному выше.
* Деление не нулевого конечного ''значения'' на ноль даёт бесконечность, знак которой определён по правилу, описанному выше.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN частное вычисляется и округляется к ближайшему <font face=Courier>double</font>, используя режим округления к ближайшему стандарта IEEE 754. Если величина слишком велика, чтобы быть представленной в диапазоне типа <font face=Courier>double</font>, говорят, что произошло переполнение. В этом случае ''результатом'' является бесконечность соответствующего знака. Если величина слишком мала, чтобы быть представленной в диапазоне типа <font face=Courier>double</font>, говорят, что произошла потеря точности. В этом случае ''результатом'' является ноль соответствующего знака.

Несмотря на переполнение, потерю точности, деление на ноль инструкция ''ddiv'' никогда не генерирует исключение времени выполнения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dload'''''
| style="text-align:right;"  | '''''dload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>double</font>  из локальной переменной в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dload''
|-
| style="vertical-align:top;"|''индекс''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dload''= 24 (0x18)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|...→

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Индекс'' является беззнаковым байтом. ''Индекс'' и величина ''индекс''+1 должны принадлежать массиву локальных переменных текущего фрейма (см. §2.6). Локальная переменная с заданным ''индексом'' должна содержать величину типа <font face=Courier>double</font>. ''Значение'' локальной переменной, с заданным ''индексом'', записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''dload'' может быть использована совместно с инструкцией ''wide'', когда необходимо задать двухбайтовый беззнаковый индекс локальной переменной.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dload_<n>'''''
| style="text-align:right;"  | '''''dload_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>double</font> из локальной переменной в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dload_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dload_0''= 38 (0x26)

''dload_1''= 39 (0x27)

''dload_2''= 40 (0x28)

''dload_3''= 41 (0x29)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|... →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И <n> и величина <n>+1 должны принадлежать массиву локальных переменных текущего фрейма (см. §2.6). Локальная переменная с индексом <n> должна содержать величину типа <font face=Courier>double</font>. ''Значение'' локальной переменной с ''индексом'' <n>, записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Каждая из инструкции ''dload_<n>'' выполняет то же, что и ''dload'' с явным ''индексом'' <n> за исключением того, что операнд <n> задан не явно.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dmul'''''
| style="text-align:right;"  | '''''dmul'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Умножает два значения типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dmul''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dmul''= 107 (0x6b)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. Результат – это число типа <font face=Courier>double</font> равное ''значение1''`* ''значение2''`. Затем ''результат'' записывается в стек операндов.

Результат инструкции ''dmul'' вычисляется согласно правилам арифметики стандарта IEEE:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата умножения положительный, если операнды имеют один знак и отрицательный в противном случае.
* Умножение бесконечности на ноль даёт не-число NaN.
* Умножение бесконечности на конечное ''значение'' даёт бесконечность, знак которой определён по правилу, описанному выше.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN произведение вычисляется и округляется к ближайшему <font face=Courier>double</font>, используя режим округления к ближайшему стандарта IEEE 754. Если величина слишком велика, чтобы быть представленной в диапазоне типа <font face=Courier>double</font>, говорят, что произошло переполнение. В этом случае ''результатом'' является бесконечность соответствующего знака. Если величина слишком мала, чтобы быть представленной в диапазоне типа <font face=Courier>double</font>, говорят, что произошла потеря точности. В этом случае ''результатом'' является ноль соответствующего знака.

Несмотря на переполнение, потерю точности ''dmul'' никогда не генерирует исключение времени выполнения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dneg'''''
| style="text-align:right;"  | '''''dneg'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Инвертирует значение типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dneg''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dneg''= 119 (0x77)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' должно принадлежать типу <font face=Courier>double</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. Результат – это число типа <font face=Courier>double</font> равное арифметическому отрицанию ''значения''`. Затем ''результат'' записывается в стек операндов.

Для значений типа <font face=Courier>double</font> отрицание не есть то же самое, что и вычитание из нуля. Если <font face=Courier>''x''</font> это  +0.0, то  0.0 - <font face=Courier>''x''</font> равно  +0.0, но  -<font face=Courier>''x''</font> равно  -0.0. Унарный минус лишь инвертирует знак числа типа <font face=Courier>double</font>.

Особые случаи:
* Если  операнд есть не-число NaN, то ''результат'' также NaN (поскольку у NaN нет знака).
* Если операнд – бесконечность, то ''результат'' – бесконечность противоположного знака.
* Если операнд – ноль, то ''результат'' – ноль противоположного знака.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''drem'''''
| style="text-align:right;"  | '''''drem'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Остаток от деления двух чисел типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''drem''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''drem''= 115 (0x73)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются  ''значением1''` и ''значением2''`. Результат вычисляется и записывается в стек операндов с типом <font face=Courier>double</font>.

Результат инструкции ''drem'' не совпадает с операцией вычисления остатка для чисел с плавающей точкой, определённой в стандарте IEEE 754. Операция вычисления остатка, заданная в стандарте IEEE 754, вычисляет остаток от «округляющего» деления, а не «урезающего» деления, так что её поведение не аналогично обычной операции целочисленного вычисления остатка. Вместо этого в виртуальной машине Java поведение инструкции ''drem'' определено наподобие инструкций целочисленного вычисления остатка (''irem'' и ''lrem''); инструкцию ''drem'' можно сравнить с библиотечной функцией <font face=Courier>fmod</font> языка <font face=Courier>''C''</font>.

Результат инструкции ''drem'' вычисляется согласно следующим правилам:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата совпадает со знаком делимого.
* Если делимое есть бесконечность или делитель есть ноль, либо оба числа есть нули, то ''результат'' – не-число  NaN.
* Если делимое есть конечное ''значение'', а делитель – бесконечность, то ''результат'' (остаток от деления) равен делимому.
* Если делимое есть ноль, а делитель – конечное ''значение'', то ''результат'' (остаток от деления) равен делимому.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN остаток от деления с плавающей точкой делимого значения1` на делитель ''значение2''` определяется следующим отношением: ''результат'' = ''значение1''` - (''значение2''` * q), где q – целое число, имеющее знак минус в случае, если ''значение1''` / ''значение2''` отрицательно и знак плюс, если ''значение1''` / ''значение2''` положительно. Величина коэффициента q равно наибольшему целому не превосходящему частного от деления ''значения1''` на ''значение2''`.

Несмотря на деление на ноль инструкция ''drem'' никогда не генерирует исключение времени выполнения. Переполнение и потеря точности не могут произойти для этой инструкции.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Остаток от деления согласно спецификации IEEE 754 может быть вычислен с помощью метода <font face=Courier>Math</font>.<font face=Courier>IEEEremainder</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dreturn'''''
| style="text-align:right;"  | '''''dreturn'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Возвращает значение типа <font face=Courier>double</font> из метода
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dreturn''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dreturn''= 175 (0xaf)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

[пусто]
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Текущий метод должен возвращать величину типа <font face=Courier>double</font>. ''Значение'' также должно принадлежать <font face=Courier>double</font>. Если текущий метод объявлен с ключевым словом <font face=Courier>synchronized</font>, то при входе в метод монитор захватывается первоначально (либо повторно, если уже был захвачен до того), а при выходе освобождается, как при выполнении инструкции ''monitorexit'' для текущего потока. Если в ходе выполнения метода не было исключений, ''значение'' считывается из стека операндов текущего фрейма (см. §2.6) и проходит ряд преобразований (см. §2.8.3). Затем преобразованное  ''значение''` записывается в стек операндов фрейма, принадлежащего вызывающему методу. Все остальные ''значения'' стека операндов текущего фрейма теряются.

Затем интерпретатор передаёт управление вызывающему методу, делая текущим соответствующий фрейм.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если реализация виртуальной машины Java не поддерживает правила структурных блокировок описанные в §2.11.10, тогда если текущий метод объявлен как  <font face=Courier>synchronized</font> и текущий поток не является владельцем монитора, захваченного при входе в метод, то при вызове ''dreturn'' будет выброшено исключение <font face=Courier>IllegalMonitorStateException</font>. Это может произойти, если <font face=Courier>synchronized</font>-метод содержит инструкцию ''monitorexit'', а инструкция ''monitorenter'' по объекту синхронизации отсутствует.

С другой стороны, если реализация виртуальной машины Java  поддерживает правила структурных блокировок описанные в §2.11.10, и во время выполнения текущего метода нарушено первое из этих правил, то при вызове ''dreturn'' будет выброшено исключение <font face=Courier>IllegalMonitorStateException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dstore'''''
| style="text-align:right;"  | '''''dstore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Считывает значение типа <font face=Courier>double</font> из стека и сохраняет в локальной переменной
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dstore''
|-
| style="vertical-align:top;"|''индекс''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dstore''= 57 (0x39)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Индекс'' является беззнаковым байтом. ''Индекс'' и величина ''индекс''+1 должны принадлежать массиву локальных переменных текущего фрейма (см. §2.6). ''Значение''  на вершине стека операндов должно принадлежать типу <font face=Courier>double</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. В локальные переменные с индексами ''индекс'' и ''индекс''+1 записывается ''значение''`.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''dstore'' может быть использована совместно с инструкцией ''wide'', когда необходимо задать двухбайтовый беззнаковый индекс локальной переменной.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dstore_<n>'''''
| style="text-align:right;"  | '''''dstore_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Считывает значение типа <font face=Courier>double</font> из стека и сохраняет в локальной переменной
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dstore_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dstore_0''= 71 (0x47)

''dstore_1''= 72 (0x48)

''dstore_2''= 73 (0x49)

''dstore_3''= 74 (0x4a)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И <n> и величина <n>+1 должны принадлежать массиву локальных переменных текущего фрейма (см. §2.6). ''Значение''  на вершине стека операндов должно принадлежать типу <font face=Courier>double</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. В локальные переменные с индексами <n> и <n> +1 записывается ''значение''`.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Каждая из инструкции ''dstore_<n>'' выполняет то же, что и ''dstore'' с явным индексом <n> за исключением того, что операнд <n> задан не явно.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dsub'''''
| style="text-align:right;"  | '''''dsub'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Вычитает два значения типа <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dsub''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dsub''= 103 (0x67)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>double</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. Результат – это число типа <font face=Courier>double</font> равное ''значение1''`- ''значение2''`. Затем ''результат'' записывается в стек операндов.

Для операндов типа <font face=Courier>double</font> всегда справедливо, что выражение <font face=Courier>''a''</font>-<font face=Courier>''b''</font> даёт такой же ''результат'', как и <font face=Courier>''a''</font>+(-<font face=Courier>''b''</font>). Тем не менее, для инструкции ''dsub'' вычитание ''значения'' из нуля не то же самое, что и отрицание, потому что если <font face=Courier>''x''</font> это +0.0, тогда 0.0-<font face=Courier>''x''</font> равно +0.0, но  -<font face=Courier>''x''</font> равно -0.0.

Несмотря на переполнение, потерю точности ''dsub'' никогда не генерирует исключение времени выполнения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup'''''
| style="text-align:right;"  | '''''dup'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует значение на вершине стека операндов
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup''= 89 (0x59)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''значение'', ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует ''значение'' на вершине стека операндов и записывает копию на вершину стека.

Инструкция ''dup'' не должна использоваться, если ''значение'' не принадлежит категории 1 вычислимых типов (см. §2.11.1)
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup_x1'''''
| style="text-align:right;"  | '''''dup_x1'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует значение на вершине стека операндов и записывает его двумя значениями ниже в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup_x1''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup_x1''= 90 (0x5a)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение2'', ''значение1'' →

..., ''значение1'', ''значение2'', ''значение1''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует ''значение'' на вершине стека операндов и записывает копию двумя значениями ниже в стек.

Инструкция ''dup_x1'' не должна использоваться, если ''значение1'' и ''значение2'' не принадлежат категории 1 вычислимых типов (см. §2.11.1)
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup_x2'''''
| style="text-align:right;"  | '''''dup_x2'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует значение на вершине стека операндов и записывает его двумя или тремя значениями ниже в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup_x2''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup_x2''= 91 (0x5b)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|Форма 1:

..., ''значение3'', ''значение2'', ''значение1'' →

..., ''значение1'', ''значение3'', ''значение2'', ''значение1''

где ''значение1'', ''значение2'' и ''значение3'' принадлежат категории 1 вычислимых типов (см. §2.11.1)



Форма 2:

..., ''значение2'', ''значение1'' →

..., ''значение1'', ''значение2'', ''значение1''

где ''значение1'' принадлежит категории 1 вычислимых типов, а ''значение2'' принадлежит категории 2  (см. §2.11.1)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует ''значение'' на вершине стека операндов и записывает копию двумя или тремя значениями ниже в стек.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup2'''''
| style="text-align:right;"  | '''''dup2'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует один или два операнда на вершине стека
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup2''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup2''= 92 (0x5c)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|Форма 1:


... ''значение2'', ''значение1'' →

..., ''значение2'', ''значение1'', ''значение2'', ''значение1''

где ''значение1'', ''значение2''  принадлежат категории 1 вычислимых типов (см. §2.11.1)



Форма 2:


..., ''значение'' →

..., ''значение'', ''значение''

где ''значение'' принадлежит категории 2 вычислимых типов  (см. §2.11.1)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует одно или два значения на вершине стека операндов и записывает копию (одно или два значения) в стек.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup2_x1'''''
| style="text-align:right;"  | '''''dup2_x1'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует один или два операнда на вершине стека и записывает его двумя или тремя значениями ниже в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup2_x1''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup2_x1''= 93 (0x5d)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|Форма 1:



..., ''значение3'', ''значение2'', ''значение1'' →

..., ''значение2'', ''значение1'', ''значение3'', ''значение2'', ''значение1''

где ''значение1'', ''значение2'' и ''значение3'' принадлежат категории 1 вычислимых типов (см. §2.11.1)



Форма 2:



..., ''значение2'', ''значение1'' →

..., ''значение1'', ''значение2'', ''значение1''

где ''значение1'' принадлежит категории 2 вычислимых типов, а ''значение2'' принадлежит категории 1  (см. §2.11.1)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует одно или два значения на вершине стека операндов и записывает копию (одно или два значения) в стек ниже на одно или два значения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''dup2_x2'''''
| style="text-align:right;"  | '''''dup2_x2'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Дублирует один или два операнда на вершине стека и записывает его двумя, тремя или четырьмя значениями ниже в стек
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''dup2_x2''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''dup2_x2''= 94 (0x5e)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|Форма 1:


..., ''значение4'', ''значение3'', ''значение2'', ''значение1'' →

..., ''значение2'', ''значение1'', ''значение4'', ''значение3'', ''значение2'', ''значение1'' 

где ''значение1'', ''значение2'', ''значение3''  и ''значение4'' принадлежат категории 1 вычислимых типов (см. §2.11.1)



Форма 2:


..., ''значение3'', ''значение2'', ''значение1'' →

..., ''значение1'', ''значение3'', ''значение2'', ''значение1''

где ''значение1'' принадлежит категории 2 вычислимых типов, а ''значение2'' и ''значение3'' принадлежат категории 1  (см. §2.11.1)



Форма 3:


..., ''значение3'', ''значение2'', ''значение1'' →

..., ''значение2'', ''значение1'', ''значение3'', ''значение2'', ''значение1''

где ''значение1'' и  ''значение2'' принадлежат категории 1 вычислимых типов, а  ''значение3'' принадлежит категории 1  (см. §2.11.1)



Форма 4:


..., ''значение2'', ''значение1'' →

..., ''значение1'', ''значение2'', ''значение1''

где ''значение1'' и ''значение3'' принадлежат категории 2 вычислимых типов (см. §2.11.1)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Копирует одно или два значения на вершине стека операндов и записывает копию (одно или два значения) в стек.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''f2d'''''
| style="text-align:right;"  | '''''f2d'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует значение типа <font face=Courier>float</font> к <font face=Courier>double</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''f2d''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''f2d''= 141 (0x8d)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение''→

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>float</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем новое ''значение'' преобразуется к типу <font face=Courier>double</font>. Результат записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Там, где инструкция ''f2d'' работает в режиме FP-strict (см. §2.8.2), будет выполнено расширение примитивных типов (см. JLS §5.1.2). Поскольку все значения множества чисел с плавающей точкой одинарной точности (см. §2.3.2) однозначно представимы значениями двойной точности, то расширение будет выполнено без потери точности.

Там, где инструкция ''f2d'' работает не в режиме FP-strict, результат преобразования может быть взят из множества значений двойной точности с расширенной экспонентой; он не обязательно округляется к ближайшему представимому значению двойной точности. Однако, если ''значение'' принадлежит множеству одинарной точности с расширенной экспонентой, а результат необходимо представить как значение двойной точности (но не с расширенной экспонентой), то может потребоваться округление ''значения''.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''f2i'''''
| style="text-align:right;"  | '''''f2i'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует значение типа <font face=Courier>float</font> к <font face=Courier>int</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''f2i''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''f2i''= 139 (0x8b)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>float</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем новое ''значение'' преобразуется к типу <font face=Courier>int</font>. Результат записывается в стек операндов.
* Если новое ''значение'' не-число NaN, ''результат'' преобразования <font face=Courier>int</font> 0.
* В противном случае, если новое ''значение'' не бесконечность, оно округляется к целочисленному <font face=Courier>''V''</font> согласно IEEE 754 (округление в направлении нуля). Если это целое число представимо в типе <font face=Courier>int</font>, то <font face=Courier>''V''</font> – ''результат'' преобразования.
* Если число <font face=Courier>''V''</font> не представимо в типе <font face=Courier>int</font> (оно слишком мало или является отрицательной бесконечностью) то ''результатом'' будет наименьшее число представимое в диапазоне <font face=Courier>int</font>. Либо <font face=Courier>''V''</font> не представимо в типе <font face=Courier>int</font>, поскольку оно слишком велико или является положительной бесконечностью, то ''результатом'' будет наибольшее число представимое в диапазоне <font face=Courier>int</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''f2i'' выполняет сужающее преобразование примитивных типов, поэтому преобразуемая величина может быть потеряна полностью либо потеряна точность представления.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''f2l'''''
| style="text-align:right;"  | '''''f2l'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Преобразует значение типа <font face=Courier>float</font> к <font face=Courier>long</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''f2l''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''f2l''= 140 (0x8c)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' на вершине стека операндов должно быть типа <font face=Courier>float</font>. Оно считывается из стека операндов и подвергается набору преобразований (см. §2.8.3). Затем новое ''значение'' преобразуется к типу <font face=Courier>long</font>. Результат записывается в стек операндов.
* Если новое ''значение'' не-число NaN, ''результат'' преобразования <font face=Courier>long</font> 0.
* В противном случае, если новое ''значение'' не бесконечность, оно округляется к целочисленному <font face=Courier>''V''</font> согласно IEEE 754 (округление в направлении нуля). Если это целое число представимо в типе <font face=Courier>long</font>, то <font face=Courier>''V''</font> – ''результат'' преобразования.
* Если число <font face=Courier>''V''</font> не представимо в типе <font face=Courier>long</font> (оно слишком мало или является отрицательной бесконечностью) то ''результатом'' будет наименьшее число представимое в диапазоне <font face=Courier>long</font>. Либо <font face=Courier>''V''</font> не представимо в типе <font face=Courier>long</font>, поскольку оно слишком велико или является положительной бесконечностью, то ''результатом'' будет наибольшее число представимое в диапазоне <font face=Courier>long</font>.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''f2l'' выполняет сужающее преобразование примитивных типов, поэтому преобразуемая величина может быть потеряна полностью либо потеряна точность представления.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fadd'''''
| style="text-align:right;"  | '''''fadd'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Складывает два значения типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fadd''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fadd''= 98 (0x62)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>float</font>. Значения считываются из стека операндов, проходят преобразования (см. §2.8.3) становясь ''значением1''` и ''значением2''`. Результат типа <font face=Courier>float</font> равен сумме ''значение1''` + ''значение2''`. Результат записывается в стек операндов. 

Суммирование производится согласно правилам арифметики IEEE:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Сумма двух бесконечностей противоположных знаков есть NaN.
* Сумма двух бесконечностей одинаковых знаков есть бесконечность того же знака.
* Сумма бесконечности и конечного числа есть бесконечность.
* Сумма двух нулей противоположных знаков есть положительный ноль.
* Сумма двух нулей одинаковых знаков есть ноль того же знака.
* Сумма двух не нулевых конечных значений одинаковой величины есть положительный ноль.
* В оставшихся случаях, когда ни один из операндов не бесконечность, не ноль и не NaN и ''значения'' имеют один знак или имеют разную величину, сумма вычисляется и округляется к ближайшему представимому значению согласно правилам округления IEEE 754. Если ''результат'' слишком велик, чтобы быть представленным как <font face=Courier>float</font>, мы говорим, что произошло переполнение. В этом случае ''результат'' есть бесконечность соответствующего знака. Если ''результат'' слишком мал, чтобы быть представленным как <font face=Courier>float</font>, мы говорим, что произошла потеря точности. В этом случае ''результат'' есть ноль соответствующего знака.

Инструкция ''fadd'' не генерирует исключение, если происходит переполнение или потеря точности.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''faload'''''
| style="text-align:right;"  | '''''faload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает в стек значение из массива типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''faload''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''faload''= 48 (0x30)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'' →

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна быть типа <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты ''значения'' типа <font face=Courier>float</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>. Как ''ссылка на массив'', так и ''индекс'' считываются из стека операндов. ''Значение'' типа <font face=Courier>float</font> считывается из элемента массива с соответствующим индексом и записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''faload'' генерирует <font face=Courier>NullPointerException</font>. В противном случае, если ''индекс'' вне границ массива, генерируется исключение <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fastore'''''
| style="text-align:right;"  | '''''fastore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает значение типа <font face=Courier>float</font>  в массив
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fastore''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fastore''= 81 (0x51)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''ссылка на массив'', ''индекс'', ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Ссылка на массив'' должна быть типа <font face=Courier>reference</font> и ссылаться на массив, чьи компоненты ''значения'' типа <font face=Courier>float</font>. ''Индекс'' должен принадлежать типу <font face=Courier>int</font>, ''значение'' должно принадлежать типу <font face=Courier>float</font>. ''Ссылка на массив'', ''индекс'' и ''значение'' считываются из стека операндов. Над значением проводится набор преобразований (см. §2.8.3), в результате которых ''значение''` сохраняется в массиве с заданным индексом.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если ''ссылка на массив'' равна <font face=Courier>null</font>, то ''fastore'' генерирует <font face=Courier>NullPointerException</font>. В противном случае, если ''индекс'' вне границ массива, генерируется исключение <font face=Courier>ArrayIndexOutOfBoundsException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fcmp<op>'''''
| style="text-align:right;"  | '''''fcmp<op>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Сравнивает два значение типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fcmp<op>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fcmpg''= 150 (0x96)

''fcmpl''= 149 (0x95)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>float</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. 

Сравнение значений с плавающей точкой производится следующим образом:

* Если ''значение1''` больше чем ''значение2''`, то в стек операндов записывается единица с типом <font face=Courier>int</font>.
* В противном случае, если ''значение1''` равно значению2`, то в стек операндов записывается ноль с типом <font face=Courier>int</font>.
* В противном случае, если ''значение1''` меньше чем ''значение2''`, то в стек операндов записывается минус единица с типом <font face=Courier>int</font>.
* В противном случае, по крайней мере, одно ''значение'' (либо ''значение1''`, либо ''значение2''`) есть не-число NaN. В этом случае инструкция ''fcmpg'' записывает 1 с типом <font face=Courier>int</font> в стек операндов, а инструкция ''fcmpl'' записывает -1 с типом <font face=Courier>int</font> в стек операндов.

Сравнение чисел с плавающей точкой выполняется согласно требованиям стандарта <font face=Courier>IEEE754</font>. Все ''значения'', отличные от не-числа NaN упорядочены, причем отрицательная бесконечность меньше чем все числа, а положительная бесконечность больше чем все числа. Положительный и отрицательный ноль считаются равными.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкции ''fcmpg'' и ''fcmpl'' отличаются только своим поведением при сравнении не-чисел NaN. Поскольку NaN не упорядочено, любое сравнения не-числа NaN и значения типа <font face=Courier>float</font> не определено, в случае, когда один либо оба операнда не-числа NaN. С помощью инструкций ''fcmpg'' и ''fcmpl'' любое сравнения чисел типа <font face=Courier>float</font> может быть скомпилировано так, чтобы выдавать результат, совпадающий и при сравнение обычных чисел и при сравнении не-чисел NaN. Более подробную информацию см. в §3.5.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fconst_<f>'''''
| style="text-align:right;"  | '''''fconst_<f>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает в стек константу типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fconst_<f>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fconst_0''= 11 (0xb)

''fconst_1''= 12 (0xc)

''fconst_2''= 13 (0xd)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|... →

..., <f>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Записывает константу <<font face=Courier>''f''</font>> типа <font face=Courier>float</font>  (0.0, 1.0 или 2.0) в стек операндов.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fdiv'''''
| style="text-align:right;"  | '''''fdiv'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Делит два значение типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fdiv''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fdiv''= 110 (0x6e)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>float</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. 

''Результат'' – это число типа <font face=Courier>float</font> равное ''значение1''`/ ''значение2''`. Затем ''результат'' записывается в стек операндов. 

''Результат'' инструкции ''fdiv'' вычисляется согласно правилам арифметики стандарта IEEE:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата деления положительный, если делимое и делитель имеют один знак и отрицательный в противном случае.
* Деление бесконечности на бесконечность даёт не-число NaN.
* Деление бесконечности на конечное ''значение'' даёт бесконечность, знак которой определён по правилу, описанному выше.
* Деление конечного ''значения'' на бесконечность даёт знаковый ноль, знак которого определён по правилу, описанному выше.
* Деление ноль на ноль даёт не-число NaN; деление ноля на конечное ''значение'' даёт знаковый ноль, знак которого определён по правилу, описанному выше.
* Деление не нулевого конечного ''значения'' на ноль дает бесконечность, знак которой определён по правилу, описанному выше.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN частное вычисляется и округляется к ближайшему <font face=Courier>float</font>, используя режим округления к ближайшему стандарта IEEE 754. Если величина слишком велика, чтобы быть представленной в диапазоне типа <font face=Courier>float</font>, говорят, что произошло переполнение. В этом случае ''результатом'' является бесконечность соответствующего знака. Если величина слишком мала, чтобы быть представленной в диапазоне типа <font face=Courier>float</font>, говорят, что произошла потеря точности. В этом случае ''результатом'' является ноль соответствующего знака. 

Несмотря на переполнение, потерю точности, деление на ноль инструкция ''fdiv'' никогда не генерирует исключение времени выполнения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fload'''''
| style="text-align:right;"  | '''''fload'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает в стек значение типа <font face=Courier>float</font> из локальной переменной
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fload''
|-
| style="vertical-align:top;"|''индекс''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fload''= 23 (0x17)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|...→

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Индекс'' является беззнаковым байтом. ''Индекс'' должен принадлежать массиву локальных переменных текущего фрейма (см. §2.6). Локальная переменная с заданным индексом должна содержать величину типа <font face=Courier>float</font>. ''Значение'' локальной переменной, с заданным индексом, записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''fload'' может быть использована совместно с инструкцией ''wide'', когда необходимо задать двухбайтовый беззнаковый индекс локальной переменной.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fload_<n>'''''
| style="text-align:right;"  | '''''fload_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Записывает в стек значение типа <font face=Courier>float</font> из локальной переменной
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fload_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fload_0''= 34 (0x22)

''fload_1''= 35 (0x23)

''fload_2''= 36 (0x24)

''fload_3''= 37 (0x25)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|...→

..., ''значение''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|<n> должно принадлежать массиву локальных переменных текущего фрейма (см. §2.6). Локальная переменная <n> должна содержать величину типа <font face=Courier>float</font>. ''Значение'' локальной переменной <n>, записывается в стек операндов.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Каждая из инструкции ''fload_<n>'' выполняет то же, что и ''fload'' с явным индексом <n> за исключением того, что операнд <n> задан не явно.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fmul'''''
| style="text-align:right;"  | '''''fmul'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Умножает два значения типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fmul''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fmul''= 106 (0x6a)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>float</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются на ''значение1''` и ''значение2''`. 

''Результат'' – это число типа <font face=Courier>float</font> равное ''значение1''`* ''значение2''`. Затем ''результат'' записывается в стек операндов. 

''Результат'' инструкции ''fmul'' вычисляется согласно правилам арифметики стандарта IEEE:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата умножения положительный, если операнды имеют один знак и отрицательный в противном случае.
* Умножение бесконечности на ноль даёт не-число NaN.
* Умножение бесконечности на конечное ''значение'' даёт бесконечность, знак которой определён по правилу, описанному выше.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN произведение вычисляется и округляется к ближайшему <font face=Courier>float</font>, используя режим округления к ближайшему стандарта IEEE 754. Если величина слишком велика, чтобы быть представленной в диапазоне типа <font face=Courier>float</font>, говорят, что произошло переполнение. В этом случае ''результатом'' является бесконечность соответствующего знака. Если величина слишком мала, чтобы быть представленной в диапазоне типа <font face=Courier>float</font>, говорят, что произошла потеря точности. В этом случае ''результатом'' является ноль соответствующего знака. 

Несмотря на переполнение, потерю точности ''fmul'' никогда не генерирует исключение времени выполнения.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fneg'''''
| style="text-align:right;"  | '''''fneg'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Инвертирует значение типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fneg''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fneg''= 118 (0x76)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Значение'' должно принадлежать типу <font face=Courier>float</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. ''Результат'' – это число типа <font face=Courier>float</font> равное арифметическому отрицанию ''значения''`. Затем ''результат'' записывается в стек операндов. 

Для значений типа <font face=Courier>float</font> отрицание не есть то же самое, что и вычитание из нуля. Если <font face=Courier>''x''</font> это  +0.0, то  0.0 - <font face=Courier>''x''</font> равно  +0.0, но  -<font face=Courier>''x''</font> равно  -0.0. Унарный минус лишь инвертирует знак числа типа <font face=Courier>float</font>.

Особые случаи:
* Если  операнд есть не-число NaN, то ''результат'' также NaN (поскольку у NaN нет знака).
* Если операнд – бесконечность, то ''результат'' – бесконечность противоположного знака.
* Если операнд – ноль, то ''результат'' – ноль противоположного знака.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''frem'''''
| style="text-align:right;"  | '''''frem'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Остаток от деления двух значений типа <font face=Courier>float</font>
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''frem''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''frem''= 114 (0x72)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение1'', ''значение2'' →

..., ''результат''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|И ''значение1'' и ''значение2'' должны принадлежать типу <font face=Courier>float</font>. Значения считываются из стека операндов и подвергаются набору преобразований (см. §2.8.3) и заменяются  ''значением1''` и ''значением2''`. 

''Результат'' вычисляется и записывается в стек операндов с типом <font face=Courier>float</font>.

''Результат'' инструкции ''frem'' не совпадает с операцией вычисления остатка для чисел с плавающей точкой, определённой в стандарте IEEE 754. Операция вычисления остатка, заданная в стандарте IEEE 754, вычисляет остаток от «округляющего» деления, а не «урезающего» деления, так что ее поведение не аналогично обычной операции целочисленного вычисления остатка. Вместо этого в виртуальной машине Java поведение инструкции ''frem'' определено наподобие инструкций целочисленного вычисления остатка (''irem'' и ''lrem''); инструкцию ''frem'' можно сравнить с библиотечной функцией <font face=Courier>fmod</font> языка <font face=Courier>''C''</font>.

''Результат'' инструкции ''frem'' вычисляется согласно следующим правилам:
* Если либо ''значение1''` либо  ''значение2''` есть не-число NaN, то ''результат'' есть NaN.
* Если ни ''значение1''` ни  ''значение2''` не являются не-числами NaN, то знак результата совпадает со знаком делимого.
* Если делимое есть бесконечность или делитель есть ноль, либо оба числа есть нули, то ''результат'' – не-число  NaN.
* Если делимое есть конечное ''значение'', а делитель – бесконечность, то ''результат'' (остаток от деления) равен делимому.
* Если делимое есть ноль, а делитель – конечное ''значение'', то ''результат'' (остаток от деления) равен делимому.
* В оставшихся случаях, когда операнды не бесконечность, не ноль и не NaN остаток от деления с плавающей точкой делимого ''значения1''` на делитель ''значение2''` определяется следующим отношением: ''результат'' = ''значение1''` - (''значение2''` * q), где q – целое число, имеющее знак минус в случае, если ''значение1''` / ''значение2''` отрицательно и знак плюс, если ''значение1''` / ''значение2''` положительно. Величина коэффициента q равно наибольшему целому не превосходящему частного от деления ''значения1''` на ''значение2''`.

Несмотря на деление на ноль инструкция ''frem'' никогда не генерирует исключение времени выполнения. Переполнение и потеря точности не могут произойти для этой инструкции.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Остаток от деления согласно спецификации IEEE 754 может быть вычислен с помощью метода <font face=Courier>Math</font>.<font face=Courier>IEEEremainder</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''freturn'''''
| style="text-align:right;"  | '''''freturn'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Возвращает значение <font face=Courier>float</font> из метода
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''freturn''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''freturn''= 174 (0xae)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

[пусто]
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|Текущий метод должен возвращать величину типа <font face=Courier>float</font>. ''Значение'' также должно принадлежать <font face=Courier>float</font>. Если текущий метод объявлен с ключевым словом <font face=Courier>synchronized</font>, то при входе в метод монитор захватывается первоначально (либо повторно, если уже был захвачен до того), а при выходе освобождается, как при выполнении инструкции ''monitorexit'' для текущего потока. Если в ходе выполнения метода не было исключений, ''значение'' считывается из стека операндов текущего фрейма (см. §2.6) и проходит ряд преобразований (см. §2.8.3). Затем преобразованное  ''значение''` записывается в стек операндов фрейма, принадлежащего вызывающему методу. Все остальные ''значения'' стека операндов текущего фрейма теряются.

Затем интерпретатор передаёт управление вызывающему методу, делая текущим соответствующий фрейм.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Исключения времени выполнения'''
| style="vertical-align:top;"|Если реализация виртуальной машины Java не поддерживает правила структурных блокировок описанные в §2.11.10, тогда если текущий метод объявлен как  <font face=Courier>synchronized</font> и текущий поток не является владельцем монитора, захваченного при входе в метод, то при вызове ''freturn'' будет выброшено исключение <font face=Courier>IllegalMonitorStateException</font>. Это может произойти, если <font face=Courier>synchronized</font>-метод содержит инструкцию ''monitorexit'', а инструкция ''monitorenter'' по объекту синхронизации отсутствует.

С другой стороны, если реализация виртуальной машины Java  поддерживает правила структурных блокировок описанные в §2.11.10, и во время выполнения текущего метода нарушено первое из этих правил, то при вызове ''freturn'' будет выброшено исключение <font face=Courier>IllegalMonitorStateException</font>.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fstore'''''
| style="text-align:right;"  | '''''fstore'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>float</font>  из стека в локальную переменную
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fstore''
|-
| style="vertical-align:top;"|''индекс''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fstore''= 56 (0x38)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|''Индекс'' является беззнаковым байтом и должен принадлежать массиву локальных переменных текущего фрейма (см. §2.6). ''Значение''  на вершине стека операндов должно принадлежать типу <font face=Courier>float</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. В локальную переменную с индексом ''индекс'' записывается ''значение''`.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Инструкция ''fstore'' может быть использована совместно с инструкцией ''wide'', когда необходимо задать двухбайтовый беззнаковый индекс локальной переменной.
|}

<br><br><br><br>
{| width="100%"
| style="text-align:left;"  | '''''fstore_<n>'''''
| style="text-align:right;"  | '''''fstore_<n>'''''
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Операция'''
| style="vertical-align:top;"|Загружает значение типа <font face=Courier>float</font>  из стека в локальную переменную
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формат'''
|
{| border="1" style="border-collapse:collapse;" width="400px"
| style="vertical-align:top;"|''fstore_<n>''
|}
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Формы'''
| style="vertical-align:top;"|''fstore_0''= 67 (0x43)

''fstore_1''= 68 (0x44)

''fstore_2''= 69 (0x45)

''fstore_3''= 70 (0x46)
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Стек операндов'''
| style="vertical-align:top;"|..., ''значение'' →

...
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Описание'''
| style="vertical-align:top;"|<n> должно принадлежать массиву локальных переменных текущего фрейма (см. §2.6). ''Значение''  на вершине стека операндов должно принадлежать типу <font face=Courier>float</font>. Оно считывается из стека операндов, и подвергаются набору преобразований (см. §2.8.3), а затем заменяется значением`. В локальную переменную с индексом <n> записывается ''значение''`.
|}
<br>
{| style="border-collapse:collapse;"
|width="150px" style="vertical-align:top;"|'''Примечания'''
| style="vertical-align:top;"|Каждая из инструкции ''fstore_<n>'' выполняет то же, что и ''fstore'' с явным индексом <n> за исключением того, что операнд <n> задан не явно.
|}

